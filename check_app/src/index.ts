import { app, BrowserWindow, dialog } from "electron";
import { autoUpdater } from "electron-updater";
// import { updateElectronApp, UpdateSourceType } from "update-electron-app";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}
// updateElectronApp({
//   updateSource: {
//     type: UpdateSourceType.ElectronPublicUpdateService,
//     repo: "anianroid/my-electron-app",
//   },
//   updateInterval: "1 hour",
//   logger: require("electron-log"),
// });
function initAutoUpdater() {
  // const server = "https://gc-check-git-check-anianroid.vercel.app/";
  // const feed = `${server}/releases/download/v${app.getVersion()}`;
  dialog.showErrorBox("Title", "Prompt text");

  const server = "https://update.electronjs.org/";
  const feed = `${server}/anianroid/gc-check/${process.platform}-${
    process.arch
  }/${app.getVersion()}`;

  autoUpdater.setFeedURL(feed);

  autoUpdater.on("checking-for-update", () => {
    console.log("Checking for update...");
    dialog.showErrorBox("Checking for update", "Checking for update");
  });

  autoUpdater.on("update-available", () => {
    console.log("Update available. Downloading...");
    dialog.showErrorBox("Update available. Downloading...", "");
  });

  autoUpdater.on("update-not-available", () => {
    console.log("No update available.");
    dialog.showErrorBox("No update available.", "");
  });

  autoUpdater.on("error", (err) => {
    console.error("Error in auto-updater:", err);
  });

  autoUpdater.on("update-downloaded", () => {
    console.log("Update downloaded. Installing...");
    autoUpdater.quitAndInstall();
  });

  // Check for updates when the app is ready
  // app.whenReady().then(() => {
  //   autoUpdater.checkForUpdates();
  // });
}

app.on("ready", initAutoUpdater);

// const server = "https://update.electronjs.org/";
// const feed = `${server}/anianroid/gc-check/${process.platform}-${
//   process.arch
// }/${app.getVersion()}`;
// interface CustomFeedURLOptions extends Electron.FeedURLOptions {
//   provider?: string;
//   repo?: string;
//   owner?: string;
//   token?: string;
//   private?: boolean;
// }

// const feedURL = "https://github.com/anianroid/gc-check/releases";

// // Create an object literal with the extended type
// const feedOptions: CustomFeedURLOptions = {
//   url: feedURL,
//   provider: "github",
//   repo: "gc-check",
//   owner: "anianroid",
//   private: false,
// };
// autoUpdater.setFeedURL(feedOptions);
// autoUpdater.setFeedURL(feed);

setInterval(() => {
  // initAutoUpdater();
  autoUpdater.checkForUpdates();
}, 60000);

// let info: "info";

// autoUpdater.on("update-downloaded", () => {
//   const dialogOpts = {
//     type: info,
//     buttons: ["Restart", "Later"],
//     title: "Application Update",
//     // message: process.platform === "win32" ? releaseNotes : releaseName,
//     message: "",
//     detail:
//       "A new version has been downloaded. Restart the application to apply the updates.",
//   };

//   dialog.showMessageBox(dialogOpts).then((returnValue) => {
//     if (returnValue.response === 0) autoUpdater.quitAndInstall();
//   });
// });

// autoUpdater.on("error", (message) => {
//   console.error("There was a problem updating the application");
//   console.error(message);
// });

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
